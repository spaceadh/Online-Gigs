#install the packages needed for this workshop
install.packages("tidyverse")
install.packages("dslabs")
install.packages("sf")
install.packages("tigris")
#load the tidyverse package
libary(tidyverse)
install.packages("dslabs")
install.packages("tigris")
install.packages("sf")
install.packages("tigris")
install.packages("sf")
install.packages("sf")
install.packages("tidyverse")
#load the tidyverse package
libary(tidyverse)
#load the tidyverse package
library(tidyverse)
library(dslabs)
library(sf)
library(tigris)
# R can do math!
3+5           #Prints 8 to the console
12/7          #prints 1.714286 to the console
# The assignment operator (<-): storing values in variables
weight_kg <- 55    # doesn't print anything
weight_kg          # typing the name of the object prints the value of weight_kg to the console
# Example: unit conversions
weight_kg*2.2               #Output the weight in pounds to the console
weight_kg<-57.5             #Values of variables can be changed
weight_lb<-weight_kg*2.2    #Results of calculations can be assigned to new variables
## Exercise: operators
#### What are the values of each variable after each statement in the following?
mass <- 47.5            # mass?
age  <- 122             # age?
mass <- mass * 2.0      # mass?
age  <- age - 20        # age?
mass_index <- mass/age  # mass_index?
# Functions and their arguments
## Functions have:
#   - Names
#   - Arguments - what they need to "know" to run that function; aka input; isn't modified
#   - Output - the result of whatever the function does; default is output to the console,
#              can be assigned to variables;
a<-9                 #assigns the value 9 to the variable a
b<-sqrt(a)           # sqrt is the function; value of a is the argument; output is assigned to b
round(3.14159)       #Round is the function, 3.14159 is the argument, output (3) goes to the console
round(3.14159, digits =2) #Rounds the output to 2 digits
# Determining data types
#Assign a number value to an object
x<-32
class(x) #numeric
#Assign text value to an object
y<-"hi"
class(y) #character
#Assign logical value to an object
z<- TRUE
class(z) #logical
# Vectors
#   Vectors allow you to assign multiple values to one variable
weight_g<-c(50,60,65,82) #vector of numbers
animals<-c("mouse", "rat", "dog") #vector of strings
# Inspecting vectors
#how many values are in the vector?
length(weight_g)
length(animals)
#What type of values are in the vector?
class(weight_g)
class(animals)
# class, length, values
str(weight_g)
str(animals)
# use logical expressions (TRUE/FALSE)
#with numbers
weight_g <- c(21, 34, 39, 54, 55) #weights
weight_tf<-weight_g>50  #evaluate each weight
#FALSE, FALSE, FALSE, TRUE, TRUE
# loading the murders object from the dslabs package
data(murders)
# murders is a data frame:
### rows are observations
### columns are variables
### must be rectangular (same # rows and cols)
### each column must be filled with the same data type
# ways to inspect your data
head(murders) #= look at first 6 rows (all columns)
str(murders) #= structure # rows, cols, data types
nrow(murders) #= number of columns
ncol(murders) #= number of columns
names(murders) #= column names
summary(murders) #= does summary stats for each column
#Exercise: inspecting data frames
# What is the class of the object murders?
# How many rows and how many columns are in this object?
#data visualizations with ggplot
# Break it down into component parts
# Step 1: Initialize the plot
#- specify data
#- creates a blank plot
ggplot(data = murders)
# Step 2: specify variales on each axis
#- specify the "aesthetic mappings"
#- start with the aes function
#-opens a plot window and draws axes
ggplot(data = murders,
mapping = aes(x = population,
y = total))
# Step 3: specify the geometry
#- use a geom function to specify how the data should be plotted
# "add" aesthetics to the ggplot function with + operator
# adds data points to the plot
ggplot(data = murders,
mapping = aes(x = population,  y = total)) +
geom_point()
# the simplest ggplot: data, aesthetic mappings, and geometry
ggplot(data = murders,
mapping = aes(x = population,  y = total)) +
geom_point()
# Adding arguments to the geom to change appearance:
ggplot(data = murders,
mapping = aes(x = population,  y = total)) +
geom_point(color='blue')
#we can map another variable through the use of color
ggplot(data = murders,
mapping = aes(x = population,  y = total)) +
geom_point(aes(color=region))
#we can literally put this data on a map with some extra packages (sf and tigris)
murders_code<-murders%>%
rename(STUSPS=abb)
#get state boundaries
US_States_Tigris<-states()
only_states <- US_States_Tigris%>%
filter(REGION != "9") %>%
shift_geometry()
#join the map to the murders data
map_data<-left_join(x=only_states, y= murders_code)
#let's map it!
ggplot(data=map_data)+
geom_sf(aes(fill=total)) #we use a different geom for maps (geom_sf)
.15*25
#get healthcare variables
cspp <- get_cspp_data(vars=c("percentuninsured", "wellbeing", "sdce", "doctorsPerCapita","higrenew", "popgovhealthins", "popnohealthins", "popprivhealthins", "hmdindex", "health_pro" ),
years = seq(2010,2010))
cspp_code<-cspp%>%
mutate(STATEFP=as.character(state_fips))
#get state boundaries
US_States_Tigris<-states()
only_states <- US_States_Tigris%>%
filter(REGION != "9") %>%
shift_geometry()
#join to the healthcare data
cspp_data<-left_join(x=only_states, y=cspp_code)
ggplot(data=cspp_data,
mapping=aes(x=popgovhealthins, y=percentuninsured))+
geom_point(aes(color=dependent_coverage))+
geom_label_repel(aes(label=st))+
scale_color_brewer(palette="Accent")
cspp_data <- cspp_data%>%
mutate(dependent_coverage=factor(sdce, levels=0:1, labels=c("no", "yes")))
ggplot(data=cspp_data,
mapping=aes(x=popgovhealthins, y=percentuninsured))+
geom_point(aes(color=dependent_coverage))+
geom_label_repel(aes(label=st))+
scale_color_brewer(palette="Accent")
taylor_swift_lyrics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/taylor_swift_lyrics.csv')
View(taylor_swift_lyrics)
library(tidytext)
taylor_swift_lyrics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/taylor_swift_lyrics.csv')
tidy_lyrics <- Lyrics %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words, by=c("word"="word"))
library(tidytext)
taylor_swift_lyrics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-29/taylor_swift_lyrics.csv')
tidy_lyrics <- taylor_swift_lyrics %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words, by=c("word"="word"))
View(tidy_lyrics)
#create a tidy text data frame
tidy_lyrics <- taylor_swift_lyrics %>%
unnest_tokens(word, Lyrics)
View(taylor_swift_lyrics)
View(tidy_lyrics)
#create a tidy text data frame
tidy_lyrics <- taylor_swift_lyrics %>%
unnest_tokens(output=word, input=Lyrics)
#this time remove the stop words
tidy_lyrics_remove_stop <- taylor_swift_lyrics %>%
unnest_tokens(word, Lyrics) %>%
anti_join(stop_words, by=c("word"="word"))
View(tidy_lyrics_remove_stop)
taylor_swift_lyrics_love%>%
mutate(contains_love=str_detect(lyrics, "love"))
taylor_swift_lyrics_love<-taylor_swift_lyrics%>%
mutate(contains_love=str_detect(lyrics, "love"))
taylor_swift_lyrics_love<-taylor_swift_lyrics%>%
mutate(contains_love=str_detect(Lyrics, "love"))
View(taylor_swift_lyrics)
View(taylor_swift_lyrics_love)
#of mentions of love
taylor_swift_lyrics_love_count<-taylor_swift_lyrics%>%
mutate(contains_love=str_count(Lyrics, "love"))
View(taylor_swift_lyrics_love_count)
#of mentions of love
taylor_swift_lyrics_love_count<-taylor_swift_lyrics%>%
mutate(love_counts=str_count(Lyrics, "love"|"Love"))
#of mentions of love
taylor_swift_lyrics_love_count<-taylor_swift_lyrics%>%
mutate(love_counts=str_count(Lyrics, "love|Love"))
View(taylor_swift_lyrics_love_count)
taylor_swift_lyrics_love <- taylor_swift_lyrics %>%
mutate(contains_love=
str_detect(Lyrics, "\\b love\\b  |  \\b loving\\b |  \\b lover\\b"))
View(taylor_swift_lyrics_love_count)
View(taylor_swift_lyrics_love)
taylor_swift_lyrics_love <- taylor_swift_lyrics %>%
mutate(contains_love=
str_detect(Lyrics, "\\blove\\b|\\bloving\\b|\\blover\\b"))
View(taylor_swift_lyrics_love)
library(textstem)
install.packages(textstem)
taylor_swift_lyrics_love <- taylor_swift_lyrics %>%
mutate(contains_love=
str_detect(Lyrics, "\\blove\\b|\\bloving\\b|\\blover\\b"))%>%
mutate(stem = wordStem(Lyrics, "en")) %>%
taylor_swift_lyrics_love <- taylor_swift_lyrics %>%
mutate(contains_love=
str_detect(Lyrics, "\\blove\\b|\\bloving\\b|\\blover\\b"))%>%
mutate(stem = wordStem(Lyrics, "en"))
install.packages("wordStem")
library(SnowballC)
taylor_swift_lyrics_love <- taylor_swift_lyrics %>%
mutate(contains_love=
str_detect(Lyrics, "\\blove\\b|\\bloving\\b|\\blover\\b"))%>%
mutate(stem = wordStem(Lyrics, "en"))
View(taylor_swift_lyrics_love)
installed.packages("text_stem")
library(text_stem)
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("trinker/textstem")
library(textstem)
#convert to stems
taylor_swift_lyrics_stem <- taylor_swift_lyrics %>%
mutate(Lyrics_stem=stem_strings(Lyrics))
View(taylor_swift_lyrics_stem)
View(taylor_swift_lyrics_stem)
data(stop_words)
force(stop_words)
View(stop_words)
View(stop_words)
#this time remove the stop words
tidy_lyrics_remove_stop <- anti_join(x=tidy_lyrics, y=stop_words)
View(tidy_lyrics_remove_stop)
tidy_lyrics_count <- tidy_lyrics %>%
count(words)
#create a tidy text data frame
tidy_lyrics <- taylor_swift_lyrics %>%
unnest_tokens(output=word, input=Lyrics)
#count the top words
tidy_lyrics_count <- tidy_lyrics %>%
count(words)
#count the top words
tidy_lyrics_count <- tidy_lyrics %>%
count(word)
View(tidy_lyrics_count)
#count the top words
tidy_lyrics_count <- tidy_lyrics %>%
count(word)%>%
arrange(desc(n))
View(tidy_lyrics_count)
View(tidy_lyrics_remove_stop)
#count the top words
tidy_lyrics_no_stop_count <- tidy_lyrics_no_stop %>%
count(word)%>%
arrange(desc(n))
#this time remove the stop words
tidy_lyrics_no_stop <- anti_join(x=tidy_lyrics, y=stop_words)
#count the top words
tidy_lyrics_no_stop_count <- tidy_lyrics_no_stop %>%
count(word)%>%
arrange(desc(n))
View(tidy_lyrics_no_stop_count)
#pipe it into ggplot
tidy_lyrics_no_stop %>%
count(word)%>%
arrange(desc(n))%>%
slice_head(n=50)%>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()
#pipe it into ggplot
tidy_lyrics_no_stop_count %>%
count(word)%>%
arrange(desc(n))%>%
slice_head(n=50)%>%
ggplot(mapping=aes(x=n, y=word))+
geom_col()
#pipe it into ggplot
tidy_lyrics_no_stop_count %>%
count(word)%>%
arrange(desc(n))%>%
slice_head(20)%>%
ggplot(mapping=aes(x=n, y=word))+
geom_col()
#pipe it into ggplot
tidy_lyrics_no_stop_count %>%
count(word)%>%
arrange(desc(n))%>%
slice_head(n=20)%>%
ggplot(mapping=aes(x=n, y=word))+
geom_col()
#count the top words
tidy_lyrics_no_stop_count <- tidy_lyrics_no_stop %>%
count(word)%>%
arrange(desc(n))%>%
slice_head(n=10)
View(tidy_lyrics_no_stop_count)
#pipe it into ggplot
tidy_lyrics_no_stop_count %>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()
#pipe it into ggplot
tidy_lyrics_no_stop_count %>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()+
coord_flip()
#pipe it into ggplot
tidy_lyrics_no_stop_count %>%
mutate(word = reorder(word, n)) %>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()+
coord_flip()
#count the top words
tidy_lyrics_no_stop_count <- tidy_lyrics_no_stop %>%
count(word)%>%
arrange(desc(n))
#put it into a bar plot
tidy_lyrics_no_stop_count %>%
slice_head(n=10)%>%
mutate(word = reorder(word, n)) %>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()+
coord_flip()
#put the top ten it into a bar plot
tidy_lyrics_no_stop_count %>%
slice_head(n=20)%>%
mutate(word = reorder(word, n)) %>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()+
coord_flip()
#put the top ten it into a bar plot
tidy_lyrics_no_stop_count %>%
slice_head(n=10)%>%
mutate(word = reorder(word, n)) %>%
ggplot(mapping=aes(x=word, y=n))+
geom_col()+
coord_flip()
tidy_lyrics_bigram <- taylor_swift_lyrics %>%
unnest_tokens(output=word, input=Lyrics,
token="ngrams", n=2)
View(tidy_lyrics_bigram)
View(tidy_lyrics_bigram)
tidy_lyrics_bigram_separated <- tidy_lyrics_bigram %>%
separate(bigram, into = c("word1", "word2"), sep = " ")
tidy_lyrics_bigram <- taylor_swift_lyrics %>%
unnest_tokens(output=bigram, input=Lyrics,
token="ngrams", n=2)
tidy_lyrics_bigram_separated <- tidy_lyrics_bigram %>%
separate(bigram, into = c("word1", "word2"), sep = " ")
tidy_lyrics_united <- tidy_lyrics_bigram_separated %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
unite(bigram, c(word1, word2), sep = " ")
View(tidy_lyrics_united)
View(tidy_lyrics_bigram)
View(tidy_lyrics_bigram_separated)
tidy_lyrics_bigram_no_stop <- tidy_lyrics_bigram_separated %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word)
View(tidy_lyrics_bigram_no_stop)
tidy_lyrics_united <-tidy_lyrics_bigram_no_stop%>%
unite(bigram, c(word1, word2), sep = " ")
View(tidy_lyrics_united)
tidy_lyrics_bigram_count <- tidy_lyrics_bigram_united%>%
count(word) %>%
arrange(desc( n))
tidy_lyrics_united <-tidy_lyrics_bigram_no_stop%>%
unite(bigram, c(word1, word2), sep = " ")
tidy_lyrics_bigram_count <- tidy_lyrics_united%>%
count(word) %>%
arrange(desc( n))
tidy_lyrics_bigram_count <- tidy_lyrics_united%>%
count(bigram) %>%
arrange(desc( n))
View(tidy_lyrics_bigram_count)
tidy_lyrics_stem<-tidy_lyrics_no_stop %>%
mutate(stem = wordStem(word, "en"))
View(tidy_lyrics_stem)
tidy_lyrics_stem_count <- tidy_lyrics_stem%>%
count(stem) %>%
arrange(desc( n))
View(tidy_lyrics_stem_count)
#put the top ten it into a bar plot
tidy_lyrics_stem_count %>%
slice_head(n=10)%>%
mutate(word = reorder(stem, n)) %>%
ggplot(mapping=aes(x=stem, y=n))+
geom_col()+
coord_flip()
tidy_lyrics_stem_count <- tidy_lyrics_stem%>%
count(stem) %>%
arrange(desc( n))
#put the top ten it into a bar plot
tidy_lyrics_stem_count %>%
slice_head(n=10)%>%
mutate(word = reorder(stem, n)) %>%
ggplot(mapping=aes(x=stem, y=n))+
geom_col()+
coord_flip()
tidy_lyrics_stem_count <- tidy_lyrics_stem%>%
count(stem) %>%
arrange(desc(n))
#put the top ten it into a bar plot
tidy_lyrics_stem_count %>%
slice_head(n=10)%>%
mutate(word = reorder(stem, n)) %>%
ggplot(mapping=aes(x=stem, y=n))+
geom_col()+
coord_flip()
#put the top ten it into a bar plot
tidy_lyrics_stem_count %>%
slice_head(n=10)%>%
mutate(stem = reorder(stem, n)) %>%
ggplot(mapping=aes(x=stem, y=n))+
geom_col()+
coord_flip()
tidy_lyrics_stem%>%
group_by(Album)%>%
filter(stem=="love")
count(stem)
tidy_lyrics_stem%>%
filter(stem=="love")%>%
group_by(Album)%>%
count(stem)
tidy_lyrics_stem%>%
filter(word=="love")%>%
group_by(Album)%>%
count(word)
taylor_swift_pronouns <- taylor_swift_lyrics %>%
mutate(contains_him=
str_detect(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))
View(taylor_swift_pronouns)
taylor_swift_pronouns <- taylor_swift_lyrics %>%
mutate(contains_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))
filter(contains_him=="TRUE")
taylor_swift_pronouns <- taylor_swift_lyrics %>%
mutate(contains_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
filter(contains_him=="TRUE")
taylor_swift_pronouns <- taylor_swift_lyrics %>%
mutate(contains_him=
str_detect(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
filter(contains_him=="TRUE")
View(taylor_swift_pronouns)
taylor_swift_pronouns <- taylor_swift_lyrics %>%
mutate(contains_him=
str_detect(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
filter(contains_him=="TRUE")
#create a tidy text data frame
tidy_lyrics_pronouns <- taylor_swift_pronouns %>%
unnest_tokens(output=word, input=Lyrics)
#this time remove the stop words
tidy_lyrics_no_stop_pronouns <- anti_join(x=tidy_lyrics_pronouns, y=stop_words)
#count the top words
tidy_lyrics_no_stop_count_pronouns <- tidy_lyrics_no_stop_pronouns %>%
count(word)%>%
arrange(desc(n))
View(tidy_lyrics_no_stop_count_pronouns)
View(tidy_lyrics_no_stop_count)
taylor_swift_pronouns <- taylor_swift_lyrics %>%
mutate(count_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
group_by(Album)%>%
summarize(sum=count_him)
taylor_swift_pronouns <- taylor_swift_lyrics %>%
group_by(Album)%>%
mutate(count_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
summarize(sum=count_him)
taylor_swift_pronouns <- taylor_swift_lyrics %>%
group_by(Album)%>%
mutate(count_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
summarize(sum=sum(count_him))
View(taylor_swift_pronouns)
taylor_swift_lyrics %>%
group_by(Album)%>%
mutate(count_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
summarize(sum_male_pronouns=sum(count_him))
taylor_swift_lyrics %>%
group_by(Album)%>%
mutate(count_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
summarize(sum_male_pronouns=sum(count_him))%>%
arrange(desc(sum_male_pronouns))
View(tidy_lyrics_stem)
taylor_swift_lyrics %>%
group_by(Album)%>%
mutate(count_him=
str_count(Lyrics, "\\bhe\\b|\\bhim\\b|\\bhis\\b"))%>%
summarize(sum_male_pronouns=sum(count_him))%>%
arrange(desc(sum_male_pronouns))
